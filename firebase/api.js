import {
  getFirebaseDatabase,
  firebaseConfig, // Import config to check if it's properly loaded
} from "./firebaseConfig"; // Adjust the path if necessary
import { ref, set, get, update, remove, push, child } from "firebase/database";

// Example usage function
export const runCrudExample = async () => {
  console.log("Running Firebase CRUD Example...");

  try {
    const db = getFirebaseDatabase();
    const itemsRef = ref(db, "items"); // Reference to the 'items' node

    // --- CREATE ---
    console.log("\n--- CREATE ---");
    // Use push to generate a unique key for the new item
    const newItemRef = push(itemsRef);
    const newItemKey = newItemRef.key; // Get the unique key generated by push

    if (!newItemKey) {
      throw new Error("Failed to generate unique key for new item.");
    }

    const newItemData = { name: "My First Item", createdAt: Date.now() };
    await set(newItemRef, newItemData);
    console.log(`Created item with key: ${newItemKey}`, newItemData);

    // --- READ (Single Item) ---
    console.log("\n--- READ (Single Item) ---");
    const specificItemRef = ref(db, `items/${newItemKey}`);
    const snapshot = await get(specificItemRef);

    if (snapshot.exists()) {
      console.log(`Read item ${newItemKey}:`, snapshot.val());
    } else {
      console.log(`Item ${newItemKey} not found.`);
    }

    // --- READ (All Items) ---
    // Note: For large datasets, consider pagination or querying.
    console.log("\n--- READ (All Items) ---");
    const allItemsSnapshot = await get(itemsRef);
    if (allItemsSnapshot.exists()) {
      console.log("All items:", allItemsSnapshot.val());
    } else {
      console.log("No items found.");
    }

    // --- UPDATE ---
    console.log("\n--- UPDATE ---");
    const updates = {
      name: "My Updated Item Name",
      updatedAt: Date.now(),
      "extra/nestedValue": "hello", // Example of updating/adding a nested value
    };
    // Use the specific item ref from the READ step
    await update(specificItemRef, updates);
    console.log(`Updated item ${newItemKey} with:`, updates);

    // Verify update
    const updatedSnapshot = await get(specificItemRef);
    if (updatedSnapshot.exists()) {
      console.log(
        `Verified updated item ${newItemKey}:`,
        updatedSnapshot.val()
      );
    }

    // // --- DELETE ---
    // console.log("\n--- DELETE ---");
    // await remove(specificItemRef);
    // console.log(`Deleted item ${newItemKey}`);

    // // Verify deletion
    // const deletedSnapshot = await get(specificItemRef);
    // if (!deletedSnapshot.exists()) {
    //   console.log(`Verified item ${newItemKey} is deleted.`);
    // } else {
    //   console.log(`Item ${newItemKey} still exists after delete attempt.`);
    // }

    console.log("\nCRUD Example Finished.");
  } catch (error) {
    console.error("Firebase CRUD Example Failed:", error);
  }
};

// --- How to run this example ---
// You would typically call this function from somewhere in your app,
// perhaps triggered by a button press or on app load (after ensuring
// Firebase is ready).
//
// Example:
// runCrudExample();
//
// Or if using in a React Native component:
// import React, { useEffect } from 'react';
// import { Button, View } from 'react-native';
//
// const MyComponent = () => {
//   useEffect(() => {
//     // Optional: Run on component mount
//     // runCrudExample();
//   }, []);
//
//   return (
//     <View>
//       <Button title="Run Firebase CRUD" onPress={runCrudExample} />
//     </View>
//   );
// };
// export default MyComponent;
